# simulate an attack on pytorch hogwild instances
# use the baselines script to run out of scratch
Executable = /home/josers2/apa/pytorch.examples/main.py

# TODO verify formatting
runname = flavor2_$(optim)_$(num_stages)-$(step_size)-$(step)
# ckpt_name = /shared/jose/pytorch/checkpoints/baseline-1-0.ckpt
# ckpt_name = /shared/jose/pytorch/outputs/resize.hogwild/train.ckpt
ckpt_name = /shared/jose/apa_baselines/$(optim)_base.ckpt
# specify optim in CLI

Output = /shared/jose/pytorch/$(runname).out
Error  = /shared/jose/pytorch/$(runname).err
Log    = /shared/jose/pytorch/$(runname).log

# system set up
request_GPUs = 0
request_CPUs = $(numWorkers) * 6 + 3
request_longjob = $(request_CPUs)

should_transfer_files = NO

numWorkers = 1
priority = 0 - $(step)

Arguments = "--lr 0.1 \
             --attack-checkpoint-path $(runname) \
             --baseline-checkpoint-path $(ckpt_name) \
             --resume 350 \
             --num-processes $(numWorkers) \
             --optimizer $(optim) \
             $(runname) \
             simulate-multi \
             --step-size $(step_size) \
             --num-stages $(num_stages)"

num_stages = 150

Queue 50 step_size from (
        10
        30
        60
        80
        100
        150
        200
        300
)
